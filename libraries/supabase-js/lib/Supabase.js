'use strict';Object.defineProperty(exports,'__esModule',{value:!0});var _createClass=function(){function a(a,b){for(var c,d=0;d<b.length;d++)c=b[d],c.enumerable=c.enumerable||!1,c.configurable=!0,'value'in c&&(c.writable=!0),Object.defineProperty(a,c.key,c)}return function(b,c,d){return c&&a(b.prototype,c),d&&a(b,d),b}}(),_realtimeJs=require('@supabase/realtime-js'),_postgrestJs=require('@supabase/postgrest-js'),_ChangeMapper=require('./utils/ChangeMapper'),ChangeMapper=_interopRequireWildcard(_ChangeMapper);function _interopRequireWildcard(a){if(a&&a.__esModule)return a;var b={};if(null!=a)for(var c in a)Object.prototype.hasOwnProperty.call(a,c)&&(b[c]=a[c]);return b.default=a,b}function _classCallCheck(a,b){if(!(a instanceof b))throw new TypeError('Cannot call a class as a function')}var Supabase=function(){function a(b,c,d,e,f,g){_classCallCheck(this,a),this.tableName=b,this.restUrl=c,this.realtimeUrl=d,this.schema=e,this.uuid=g,this.apikey=f,this.socket=null,this.channel=null,this.listeners={},this.queryFilters=[]}/**
   * REALTIME FUNCTIONALITY
   */return _createClass(a,[{key:'createListener',value:function e(){var a=this,b=''+this.realtimeUrl,c='';this.queryFilters.forEach(function(a){switch(a.filter){case'filter':'eq'===a.operator&&(c=':'+a.columnName+'='+a.operator+'.'+a.criteria);break;default:}});var d='*'==this.tableName?'realtime:*':'realtime:'+this.schema+':'+this.tableName+c;this.socket=new _realtimeJs.Socket(b,{params:{apikey:this.apikey}}),this.channel=this.socket.channel(d),this.socket.onOpen(function(){console.debug(a.realtimeUrl+': REALTIME CONNECTED')}),this.socket.onClose(function(){console.debug(a.realtimeUrl+': REALTIME DISCONNECTED')})}},{key:'on',value:function c(a,b){return null==this.socket&&this.createListener(),this.channel.on(a,function(a){var c={schema:a.schema,table:a.table,commit_timestamp:a.commit_timestamp},d={},e={},f={};switch(a.type){case'INSERT':d=ChangeMapper.convertChangeData(a.columns,a.record),c.eventType='INSERT',c.new=d;break;case'UPDATE':e=ChangeMapper.convertChangeData(a.columns,a.old_record),d=ChangeMapper.convertChangeData(a.columns,a.record),Object.keys(e).forEach(function(a){null!=e[a]&&(f[a]=e[a])}),c.eventType='UPDATE',c.old=f,c.new=d;break;case'DELETE':e=ChangeMapper.convertChangeData(a.columns,a.old_record),Object.keys(e).forEach(function(a){null!=e[a]&&(f[a]=e[a])}),c.eventType='DELETE',c.old=f;break;default:}b(c)}),this.listeners[a]=b,this}},{key:'subscribe',value:function b(){var a=this;return null==this.socket&&this.createListener(),this.socket.connect(),'joined'!==this.channel.state&&this.channel.join().receive('ok',function(b){return console.debug(a.realtimeUrl+': Joined Realtime successfully ',b)}).receive('error',function(b){return console.debug(a.realtimeUrl+': Unable to join ',b)}).receive('timeout',function(){return console.debug(a.realtimeUrl+': Network timeout. Still waiting...')}),this}},{key:'unsubscribe',value:function a(){return this.socket&&this.socket.disconnect(),this}/**
   * REST FUNCTIONALITIES
   */},{key:'initClient',value:function c(){var a=new _postgrestJs.PostgrestClient(this.restUrl,{headers:{apikey:this.apikey}}),b=a.from(this.tableName);// go through queryFilters
return this.queryFilters.forEach(function(a){switch(a.filter){case'filter':b.filter(a.columnName,a.operator,a.criteria);break;case'match':b.match(a.query);break;case'order':b.order(a.property,a.ascending,a.nullsFirst);break;case'range':b.range(a.from,a.to);break;case'single':b.single();break;default:}}),b}},{key:'select',value:function d(){var a=0<arguments.length&&void 0!==arguments[0]?arguments[0]:'*',b=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{},c=this.initClient();return c.select(a,b)}},{key:'insert',value:function d(a){var b=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{},c=this.initClient();return c.insert(a,b)}},{key:'update',value:function d(a){var b=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{},c=this.initClient();return c.update(a,b)}},{key:'delete',value:function c(){var a=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},b=this.initClient();return b.delete(a)}},{key:'filter',value:function d(a,b,c){return this.queryFilters.push({filter:'filter',columnName:a,operator:b,criteria:c}),this}},{key:'match',value:function b(a){return this.queryFilters.push({filter:'match',query:a}),this}},{key:'order',value:function d(a){var b=!!(1<arguments.length&&void 0!==arguments[1])&&arguments[1],c=!!(2<arguments.length&&void 0!==arguments[2])&&arguments[2];return this.queryFilters.push({filter:'order',property:a,ascending:b,nullsFirst:c}),this}},{key:'range',value:function c(a,b){return this.queryFilters.push({filter:'range',from:a,to:b}),this}},{key:'single',value:function a(){return this.queryFilters.push({filter:'single'}),this}}]),a}(),advancedFilters=['eq','gt','lt','gte','lte','like','ilike','is','in','not'];// pre-empts if any of the filters are used before select
advancedFilters.forEach(function(a){return Supabase.prototype[a]=function(b,c){return this.filter(b,a,c)}}),exports.default=Supabase,module.exports=exports.default;