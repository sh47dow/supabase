export const nextJsConfig1 = `
const withSass = require('@zeit/next-sass')
const path = require("path")

// Next Config
const nextConfig = {
  webpack(config) {
    config.resolve.alias['~'] = path.join(__dirname, '')
    return config
  },
}

module.exports = withSass({ nextConfig });
`

export const store1 = `
export const useStore = props => {
  const [channels, setChannels] = useState(new Array())
  const [messages, setMessages] = useState(new Array())
  const [users] = useState(new Map())

  // Load initial data when the store is loaded
  useEffect(() => {
    // @todo
  }, [])

  // Update the store when the user changes the "channel"
  useEffect(() => {
    // @todo
  }, [props.channelId])


  return {
    // We can export computed values here to map the authors to each message
    messages: messages.map(x => ({ ...x, author: users.get(x.user_id) })),
    channels: channels.sort((a, b) => a.slug.localeCompare(b.slug)),
    users,
  }
}
`

export const schema = `
-- USERS
CREATE TYPE public.user_status AS ENUM ('ONLINE', 'OFFLINE');
CREATE TABLE public.users (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  username text,
);

-- CHANNELS
CREATE TABLE public.channels (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  slug text NOT NULL UNIQUE
);

-- MESSAGES
CREATE TABLE public.messages (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  message text,
  user_id bigint REFERENCES users NOT NULL,
  channel_id bigint REFERENCES channels NOT NULL
);

-- Create the Replication publication for Supabase
CREATE PUBLICATION supabase_realtime FOR ALL TABLES;


-- SOME DUMMY DATA
INSERT INTO
    public.users (username)
VALUES
    ('supabot'),
    ('kiwicopple'),
    ('awailas'),
    ('dragarcia');

INSERT INTO
    public.channels (slug)
VALUES
    ('public'),
    ('random');

INSERT INTO
    public.messages (message, channel_id, user_id)
VALUES
    ('Hello World ðŸ‘‹', 1, 1),
    ('Goodbye cruel world.', 2, 1);
`

export const dockerfile = `
version: '3'

services:
  supabase:
    image: supabase/supabase-dev:0.1.4
    ports:
      - "8000:8000"
    environment:
      DB_HOST: db
      DB_NAME: postgres
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_PORT: 5432
      DB_SCHEMA: public
    depends_on:
      - db
  db:
    image: postgres:12
    ports:
      - "5432:5432"
    volumes:
      - ./db:/docker-entrypoint-initdb.d/
    command:
      - "postgres"
      - "-c"
      - "wal_level=logical"
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_PORT: 5432
`